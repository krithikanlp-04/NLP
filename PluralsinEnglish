#create a custom python dictionary with irregular forms from a text file 
dict_plural = {}

f=open("krithika_irregular.txt")        # text file containing irregular nouns and their plural forms 
for line in f:
    (key, val) = line.split()  # first entry is taken as singular, second it's corresponding plural
    dict_plural[key]=val
f.close()

#dict_plural is the dictionary created from the text file

irreg_nouns=[]
for word in dict_plural:
    irreg_nouns.append(word)



#                       ******** Dictionary of root modifiers for different classes of nouns    **********

epenthesis={
            "y-sounds":"ie",
            "f-sounds":"ve",
            "s-sounds":"e",
            "o-sounds":"e",
            "others":""
            
            }


suffix="s"


#these are exceptions to the rule in regular nouns 
f_exception=["leaf","hoof","loaf"]            # exception to a "f" rule
o_exception =["photo","kilo","rhino"]         # exception to the "o" rule
ch_exception=["stomach","epoch","monarch","plutarch","oligarch"]  # exceptions to the ch rules

# This code forms plurals using 2 steps i) root modification - word undergoing epenthesis or deletion or no change
#                                       ii) affixing '-s'   



while True: #loop until correct   
    
        #prompt user to enter a word as many times, till they want to
        
        print("\n Enter a singular nouns to print the plural form: press 0 to exit")
        
        original_wd=input()
        root=original_wd.lower()
        mod_root=root

        #Check if the input is valid. If a user enters 0 or any other non alpha input

        if root=="0":
            print("Exiting...")
            break
        
        elif root.isalpha() is False :
            if root in irreg_nouns:              #to account for some hyphenated words or compound words
                print("\n This word takes an irregular plural form. The plural  of ",root,"is: ",dict_plural[root])
                
            else:
                print("Please enter valid singular noun with no special characters or digits to display its plural")
            
            continue
            
        #Check if the singular noun takes irregular plurals using dictionary text file. If yes, return plural else go to the categories
        
        elif root in irreg_nouns:
            print("\n This word takes an irregular plural form. The plural  of ",root,"is: ",dict_plural[root])
            continue
        # Step I: If valid input is seen then first root is modified based on different categories
        
        # Category 1: spellings ending in z, ch or sh  - plural is + "-es"
        
        elif root.endswith("ch") or root.endswith("sh")   or  root.endswith("z")  or root.endswith("x") :        
                                                                    
            if root in ch_exception:
                mod_root=root+ epenthesis["others"]                  # words ending with k sounds take -s plurals     
            else:
                mod_root=root+ epenthesis["s-sounds"]                # modify root by adding -e
        
        # Category 2: spellings ending in s
        elif root.endswith("sis"):                                 # words ending with sis usually become ses
            mod_root=root[:-2]                                  #modify root by deleting -is
            mod_root=mod_root+ epenthesis["s-sounds"]
        elif root.endswith("s"):
            mod_root=root           
            mod_root=mod_root+epenthesis["s-sounds"]
        
        # Category 3: words ending in y will delete the"y" if the penultimate letter is a consonant otherwise no modification
        
        elif root.endswith("y") and root[len(root)-2] not in "aeiou":
            mod_root=root[:-1]                                               # the -y is deleted in the root
            mod_root=mod_root+epenthesis["y-sounds"]                           # epenthesis of ie
        
        # Category 4: words ending in f or "fe" and take suffix "ves" after deleting the f
        
        
        elif root.endswith("f") or root.endswith("fe"):
            if   root.endswith("f") and root[len(root)-2] not in "aeiouf":   # rule applies to words ending with C'f' where C is a consonant other than f
                    mod_root=root[:-1]                                       # delete final -f
                    mod_root=mod_root+epenthesis["f-sounds"]                   # epenthesis of -ve                                      
            
            elif    root  in f_exception:                                  # words like leaf and hoof are an exception to the rule above. they end in vowel + f but take the form -ves
                    mod_root=root[:-1]                                       # delete final -f
                    mod_root=mod_root+epenthesis["f-sounds"]                   # epenthesis of -ve                                      
    
            elif root.endswith("fe"):                                        # words ending with fe take the form -ves in plural form
                    mod_root= root[:-2]                                      # delete final -fe
                    mod_root=mod_root+epenthesis["f-sounds"]                   # epenthesis of -ve                                      
            else:

                    
                    mod_root=root                                            # root is unmodified in other cases (vowels followed by f )
        
        # Category 5: words ending in C followed by "o" take the plural form -oes except in case of shortened words

        elif root.endswith("o") and root[len(root)-2] not in "aeiouyw":
            if root in o_exception:                                         # this exception occurs for short forms ending in o such as rhino, kilo, photo, 
                mod_root=root+epenthesis["others"]

            else:                                                             # words that end in a consonant followed by "o" undergo -e epenthesis
                mod_root=root+epenthesis["o-sounds"]    
        
        
        # Category 6: Other regular nouns and words not satisfying the above categories do not modify the root
        else:
            mod_root=root + epenthesis["others"]                                                   #root unmodified
        
        
        
        # Step II 
        # Affixing the "-s" to the root form from above
        
        print("The plural form of ",root,"is :",mod_root + suffix)           # All root words unchanged/modified with appropriate deletion and epenthesis. Finally -s is added

#                                   ********************END***************************
             


